{"version":3,"sources":["Todo.js","NewTodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isEditing","updatedTask","task","updatedDate","date","handleComplete","bind","assertThisInitialized","handleRemove","handleChange","handleUpdate","handleEdit","evt","remove","id","setState","defineProperty","target","name","value","updateTodo","completeTodo","result","react_default","a","createElement","className","type","onChange","onClick","isCompleted","Component","NewTodoForm","keyCounter","handleSubmit","preventDefault","newTodo","objectSpread","key","addTodo","onSubmit","htmlFor","placeholder","TodoList","todos","remTodo","editTodo","item","currState","concat","toConsumableArray","filter","message","updatedArray","map","todo","_this2","todoItem","src_Todo_0","src_NewTodoForm_0","todosRender","App","src_TodoList_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b10e5515.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Todo.css\";\r\n\r\nclass Todo extends Component {\r\n\tconstructor (props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tisEditing: false,\r\n\t\t\tupdatedTask: this.props.task,\r\n\t\t\tupdatedDate: this.props.date\r\n\t\t};\r\n\t\tthis.handleComplete = this.handleComplete.bind(this);\r\n\t\tthis.handleRemove = this.handleRemove.bind(this);\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t\tthis.handleUpdate = this.handleUpdate.bind(this);\r\n\t\tthis.handleEdit = this.handleEdit.bind(this);\r\n\t}\r\n\thandleRemove (evt) {\r\n\t\tthis.props.remove(this.props.id);\r\n\t}\r\n\thandleChange (evt) {\r\n\t\tthis.setState({ [evt.target.name]: evt.target.value });\r\n\t}\r\n\thandleUpdate (evt) {\r\n\t\tthis.setState({ isEditing: false });\r\n\t\tthis.props.updateTodo(\r\n\t\t\tthis.props.id,\r\n\t\t\tthis.state.updatedTask,\r\n\t\t\tthis.state.updatedDate\r\n\t\t);\r\n\t}\r\n\thandleEdit (evt) {\r\n\t\tthis.setState({ isEditing: true });\r\n\t}\r\n\thandleComplete (evt) {\r\n\t\tthis.props.completeTodo(this.props.id);\r\n\t}\r\n\trender () {\r\n\t\tlet result;\r\n\t\tif (!this.state.isEditing) {\r\n\t\t\tresult = (\r\n\t\t\t\t<div className=\"card-body\">\r\n\t\t\t\t\t<h5 onClick={this.handleComplete} className=\"card-title\">\r\n\t\t\t\t\t\t{this.props.task}\r\n\t\t\t\t\t</h5>\r\n\t\t\t\t\t<h6\r\n\t\t\t\t\t\tonClick={this.handleComplete}\r\n\t\t\t\t\t\tclassName=\"card-subtitle mb-2 text-muted\">\r\n\t\t\t\t\t\t{this.props.date}\r\n\t\t\t\t\t</h6>\r\n\t\t\t\t\t<button className=\"btn btn-outline-info\" onClick={this.handleEdit}>\r\n\t\t\t\t\t\tEdit\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"btn btn-outline-danger mx-2\"\r\n\t\t\t\t\t\tonClick={this.handleRemove}>\r\n\t\t\t\t\t\tRemove\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tresult = (\r\n\t\t\t\t<div className=\"card-body\">\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tname=\"updatedTask\"\r\n\t\t\t\t\t\tclassName=\"form-control my-1\"\r\n\t\t\t\t\t\tvalue={this.state.updatedTask}\r\n\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"date\"\r\n\t\t\t\t\t\tname=\"updatedDate\"\r\n\t\t\t\t\t\tclassName=\"form-control my-1 mb-2\"\r\n\t\t\t\t\t\tvalue={this.state.updatedDate}\r\n\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<button className=\"btn btn-outline-info\" onClick={this.handleUpdate}>\r\n\t\t\t\t\t\tUpdate\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"btn btn-outline-danger mx-2\"\r\n\t\t\t\t\t\tonClick={this.handleRemove}>\r\n\t\t\t\t\t\tRemove\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tclassName={\r\n\t\t\t\t\tthis.props.isCompleted ? \"card mb-4 Todo-Completed\" : \"card mb-4\"\r\n\t\t\t\t}>\r\n\t\t\t\t{result}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Todo;\r\n","import React, {Component} from 'react';\r\nimport './NewTodoForm.css';\r\n\r\nclass NewTodoForm extends Component {\r\n     constructor (props) {\r\n          super(props);\r\n          this.keyCounter = 0;\r\n          this.state = {\r\n               task: \"\",\r\n               date: \"\"\r\n          }\r\n          this.handleChange = this.handleChange.bind(this);\r\n          this.handleSubmit = this.handleSubmit.bind(this);\r\n     }\r\n     handleChange (evt) {\r\n          this.setState({\r\n               [evt.target.name]: evt.target.value\r\n          })\r\n     }\r\n     handleSubmit (evt) {\r\n          evt.preventDefault();\r\n          const newTodo = {...this.state,\r\n                              key: this.keyCounter,\r\n                              id: this.keyCounter,\r\n                              isCompleted: false}\r\n          this.props.addTodo(newTodo);\r\n          this.setState({\r\n               task: \"\",\r\n               date: \"\"\r\n          });\r\n          this.keyCounter++;\r\n     }\r\n     render() {\r\n          return (\r\n               <form className=\"NewTodoForm\"\r\n                    onSubmit={this.handleSubmit}>\r\n                    <div className=\"NewTodoForm-input form-group\">\r\n                         <label htmlFor=\"task\">Task:</label>\r\n                         <input type=\"text\"\r\n                              id=\"task\"\r\n                              className=\"form-control\"\r\n                              name=\"task\"\r\n                              placeholder=\"Ex: Create React App...\"\r\n                              value={this.state.task}\r\n                              onChange={this.handleChange} />\r\n                    </div>\r\n                    <div className=\"NewTodoForm-input form-group\">\r\n                         <label htmlFor=\"date\">Date:</label>\r\n                         <input type=\"date\"\r\n                              id=\"date\"\r\n                              className=\"form-control\"\r\n                              name=\"date\"\r\n                              value={this.state.date}\r\n                              onChange={this.handleChange} />\r\n                    </div>\r\n                    <button className=\"btn btn-primary my-auto\">ADD ToDo!</button>\r\n               </form>\r\n          );\r\n     }\r\n}\r\n\r\nexport default NewTodoForm;\r\n","import React, { Component } from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport NewTodoForm from \"./NewTodoForm\";\r\nimport \"./TodoList.css\";\r\n\r\nclass TodoList extends Component {\r\n\tconstructor (props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\ttodos: []\r\n\t\t};\r\n\t\tthis.addTodo = this.addTodo.bind(this);\r\n\t\tthis.remTodo = this.remTodo.bind(this);\r\n\t\tthis.editTodo = this.editTodo.bind(this);\r\n\t\tthis.completeTodo = this.completeTodo.bind(this);\r\n\t}\r\n\taddTodo (item) {\r\n\t\tthis.setState((currState) => ({ todos: [ ...currState.todos, item ] }));\r\n\t}\r\n\tremTodo (id) {\r\n\t\tthis.setState((currState) => ({\r\n\t\t\ttodos: currState.todos.filter((item) => item.id !== id)\r\n\t\t}));\r\n\t}\r\n\teditTodo (id, message, date) {\r\n\t\tlet updatedArray = this.state.todos.map((todo) => {\r\n\t\t\tif (todo.id === id) {\r\n\t\t\t\treturn { ...todo, task: message, date: date };\r\n\t\t\t}\r\n\t\t\treturn todo;\r\n\t\t});\r\n\t\tthis.setState({ todos: updatedArray });\r\n\t}\r\n\tcompleteTodo (id) {\r\n\t\tlet updatedArray = this.state.todos.map((todo) => {\r\n\t\t\tif (todo.id === id) {\r\n\t\t\t\treturn { ...todo, isCompleted: !todo.isCompleted };\r\n\t\t\t}\r\n\t\t\treturn todo;\r\n\t\t});\r\n\t\tthis.setState({ todos: updatedArray });\r\n\t}\r\n\ttodosRender () {\r\n\t\treturn this.state.todos.map((todoItem) => (\r\n\t\t\t<div\r\n\t\t\t\tclassName=\"col-12 col-sm-6 col-md-4 col-lg-3 TodoList-todos\"\r\n\t\t\t\tkey={todoItem.key}>\r\n\t\t\t\t<Todo\r\n\t\t\t\t\tkey={todoItem.key}\r\n\t\t\t\t\tid={todoItem.key}\r\n\t\t\t\t\ttask={todoItem.task}\r\n\t\t\t\t\tdate={todoItem.date}\r\n\t\t\t\t\tisCompleted={todoItem.isCompleted}\r\n\t\t\t\t\tcompleteTodo={this.completeTodo}\r\n\t\t\t\t\tupdateTodo={this.editTodo}\r\n\t\t\t\t\tremove={this.remTodo}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t));\r\n\t}\r\n\trender () {\r\n\t\treturn (\r\n\t\t\t<div className=\"container my-5 pt-3 TodoList\">\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t\t<h1>Increase Productivity...</h1>\r\n\t\t\t\t\t\t<h5>By keeping track of todos</h5>\r\n\t\t\t\t\t\t<div className=\"col-12 col-sm-8 col-md-4 mx-auto\">\r\n\t\t\t\t\t\t\t<NewTodoForm addTodo={this.addTodo} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"row my-5\">{this.todosRender()}</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\nimport TodoList from './TodoList';\nimport './App.css';\n\nfunction App() {\n     return (\n          <div className=\"App\">\n               <TodoList />\n          </div>\n     );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}